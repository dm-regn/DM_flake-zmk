#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    require-prior-idle-ms = <25>;
    flavor = "tap-preferred";
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 PLUS TILDE LEFT RIGHT DOWN UP>; };

&lt { require-prior-idle-ms = <25>; };

&mmv { acceleration-exponent = <2>; };

&msc { acceleration-exponent = <1>; };

/ {
    combos {
        compatible = "zmk,combos";

        zoom {
            bindings = <&kp RC(N0)>;
            key-positions = <36 37>;
            layers = <0>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <44 45>;
            require-prior-idle-ms = <10>;
            layers = <0>;
        };

        caps {
            bindings = <&caps_word>;
            key-positions = <40 41>;
            require-prior-idle-ms = <25>;
            layers = <0>;
        };

        pp {
            bindings = <&kp C_PP>;
            key-positions = <44 45>;
            require-prior-idle-ms = <25>;
            layers = <1>;
        };

        gaming {
            bindings = <&to 6>;
            key-positions = <44 45>;
            layers = <5>;
            require-prior-idle-ms = <25>;
        };

        navi {
            bindings = <&to 2>;
            key-positions = <44 45>;
            require-prior-idle-ms = <25>;
            layers = <2>;
        };

        nums {
            bindings = <&to 3>;
            key-positions = <44 45>;
            require-prior-idle-ms = <25>;
            layers = <3>;
        };

        L_SHFT {
            bindings = <&sk LSHFT>;
            key-positions = <15 16>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        R_SHFT {
            bindings = <&sk LSHFT>;
            key-positions = <19 20>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        L_CTRL {
            bindings = <&sk LCTRL>;
            key-positions = <14 15>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        R_CTRL {
            bindings = <&sk LCTRL>;
            key-positions = <20 21>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        L_ALT {
            bindings = <&sk LALT>;
            key-positions = <13 14>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        R_ALT {
            bindings = <&sk LALT>;
            key-positions = <21 22>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };
    };

    macros {
        dbl_Lclk: dbl_Lclk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK>;
            label = "DBL_LCLK";
        };

        carets: carets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT_ARROW>;
            label = "CARETS";
        };

        parents: parents {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "PARENTS";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKETS";
        };

        curls: curls {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT_ARROW>;
            label = "CURLS";
        };

        not_app: not_app {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N) &kp FSLH &kp LS(A)>;
            label = "NOT_APP";
        };

        year: year {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N0 &kp N2 &kp N5>;
            label = "YEAR";
        };

        main_ad: main_ad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "MAIN_AD";
            wait-ms = <0>;
        };

        super_ad: super_ad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp DOT &kp D &kp E &kp L &kp L &kp O &kp N &kp DOT &kp M &kp O &kp Y>;
            label = "SUPER_AD";
            wait-ms = <0>;
        };

        apo_r: apo_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp R &kp E &kp SPACE>;
            label = "APO_R";
        };

        apo_s: apo_s {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp S &kp SPACE>;
            label = "APO_S";
        };

        apo_t: apo_t {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp T &kp SPACE>;
            label = "APO_T";
        };

        apo_y: apo_y {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp SQT>;
            label = "APO_Y";
        };

        apo_L: apo_L {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp L &kp L &kp SPACE>;
            label = "APO_L";
        };

        apo_v: apo_v {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp V &kp E &kp SPACE>;
            label = "APO_V";
        };

        au: au {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp U>;
            label = "AU";
        };

        sw: sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp W>;
            label = "SW";
        };

        vi: vi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp I>;
            label = "VI";
        };

        cs: cs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp S>;
            label = "CS";
        };

        fl: fl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp L>;
            label = "FL";
        };

        lf: lf {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp F>;
            label = "LF";
        };

        comma: comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "COMMA";
        };

        period: period {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE>;
            label = "PERIOD";
        };

        gm: gm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp M>;
            label = "GM";
        };

        dot_com: dot_com {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp C &kp O &kp M>;
            label = "DOT_COM";
        };

        dot_net: dot_net {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp N &kp E &kp T>;
            label = "DOT_NET";
        };

        dot_org: dot_org {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp O &kp R &kp G>;
            label = "DOT_ORG";
        };

        dot_gov: dot_gov {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp G &kp O &kp V>;
            label = "DOT_GOV";
        };

        pd: pd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp D>;
            label = "PD";
        };

        ef: ef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp F>;
            label = "EF";
        };

        fe: fe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp E>;
            label = "FE";
        };

        apo_c: apo_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp SQT>;
            label = "APO_C";
        };

        apo_n: apo_n {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp SQT>;
            label = "APO_N";
        };

        ua: ua {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp A>;
            label = "UA";
        };

        ble: ble {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp L &kp E>;
            label = "BLE";
        };

        Le: Le {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp E>;
            label = "LE";
        };

        ke: ke {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp E>;
            label = "KE";
        };

        ve: ve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp E>;
            label = "VE";
        };

        eve: eve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp V &kp E>;
            label = "EVE";
        };

        je: je {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp J &kp E>;
            label = "JE";
        };

        ph: ph {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp H>;
            label = "PH";
        };

        ka: ka {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp A>;
            label = "KA";
        };

        ov: ov {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp V>;
            label = "OV";
        };

        vo: vo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp O>;
            label = "VO";
        };

        apo_m: apo_m {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp M &kp SPACE>;
            label = "APO_M";
        };

        ou: ou {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
            label = "OU";
        };

        vy: vy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp Y>;
            label = "VY";
        };

        xe: xe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp X &kp E>;
            label = "XE";
        };

        dbl_qte: dbl_qte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
            label = "DBL_QTE";
        };

        sgl_qte: sgl_qte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
            label = "SGL_QTE";
        };

        re: re {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp E>;
            label = "RE";
        };

        gh: gh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp H>;
            label = "GH";
        };

        apo_d: apo_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp D &kp SPACE>;
            label = "APO_D";
        };

        ion: ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp N &kp SPACE>;
            label = "ION";
        };
    };

    behaviors {
        punct_spc: punct_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "PUNCT_SPC";
            bindings = <&period>, <&comma>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <25>;
            flavor = "tap-preferred";
        };

        quotes: quotes {
            compatible = "zmk,behavior-hold-tap";
            label = "QUOTES";
            bindings = <&dbl_qte>, <&sgl_qte>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <25>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none       &kp X          &kp W          &kp M  &mt PRINTSCREEN P  &kp Z         &none                  &kp F    &kp U  &kp Y         &kp Q         &none
&sl 4       &mt LGUI R     &kp S          &kp T  &kp H              &kp B         &kp J                  &kp N    &kp A  &kp I         &mt RGUI O    &sl 4
&kp RETURN  &key_repeat    &kp C          &kp G  &kp D              &mt F4 ESC    &mt LG(L) LA(LC(DEL))  &kp L    &kp K  &kp V         &key_repeat   &kp RETURN
            &kp RC(MINUS)  &kp LC(EQUAL)  &sl 5  &lt 2 SPACE        &sl 1         &sl 1                  &lt 3 E  &sl 5  &kp C_VOL_DN  &kp C_VOL_UP
            >;
        };

        steno {
            bindings = <
&trans          &xe      &trans    &trans       &ph           &trans    &trans  &fl           &ua          &ou         &trans      &trans
&punct_spc 0 0  &re      &sw       &trans       &gh           &ble      &trans  &fe           &au          &vi         &ov         &none
&sk LSHFT       &none    &cs       &gm          &pd           &trans    &trans  &lf           &ke          &ve         &eve        &sk RSHFT
                &kp DEL  &kp BSPC  &kp LC(DEL)  &kp LC(BSPC)  &none     &none   &kp LC(BSPC)  &kp LC(DEL)  &kp C_PREV  &kp C_NEXT
            >;
        };

        Navigation {
            bindings = <
&to 0     &kp TAB          &mt HOME PG_UP   &kp UP           &mt END PG_DN    &studio_unlock    &msc SCRL_LEFT  &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &msc SCRL_RIGHT  &none
&kp LALT  &kp LGUI         &kp LEFT         &kp DOWN         &kp RIGHT        &none             &none           &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK        &kp LG(RS(D))
&trans    &mt RC(F) RC(A)  &mt LG(V) RC(V)  &mt RC(X) RC(C)  &mt RC(Y) RC(Z)  &none             &none           &kp RSHFT       &kp RCTRL       &kp RALT         &none            &trans
          &bt BT_PRV       &bt BT_NXT       &bt BT_CLR       &none            &out OUT_TOG      &dbl_Lclk       &mkp LCLK       &none           &none            &none
            >;
        };

        num+sym {
            bindings = <
&to 0      &none         &kp N3        &kp N4   &kp N7    &kp PERCENT         &none     &kp BACKSLASH                   &kp POUND                           &kp CARET              &kp GRAVE                      &none
&kp EQUAL  &key_repeat   &kp N0        &kp N1   &kp N2    &kp N9              &kp LGUI  &kp ASTRK                       &kp SLASH                           &kp PLUS               &kp MINUS                      &mt COLON SEMI
&trans     &none         &kp N5        &kp N6   &kp N8    &kp DOLLAR          &none     &mt LESS_THAN LEFT_PARENTHESIS  &mt GREATER_THAN RIGHT_PARENTHESIS  &mt LBRC LEFT_BRACKET  &mt RIGHT_BRACE RIGHT_BRACKET  &trans
           &kp C_BRI_DN  &kp C_BRI_UP  &kp DEL  &kp BSPC  &mt COMMA PERIOD    &none     &none                           &none                               &none                  &none
            >;
        };

        quick {
            bindings = <
&trans  &trans  &trans  &apo_m    &trans           &trans                            &trans             &ef     &trans    &apo_y  &trans  &trans
&none   &apo_r  &apo_s  &apo_t    &trans           &trans                            &trans             &apo_n  &trans    &ion    &vo     &none
&trans  &trans  &apo_c  &trans    &trans           &trans                            &trans             &apo_L  &ka       &apo_v  &trans  &trans
        &trans  &trans  &kp PIPE  &mt TILDE UNDER  &mt DOUBLE_QUOTES SINGLE_QUOTE    &mt QUESTION EXCL  &kp AT  &kp AMPS  &trans  &trans
            >;
        };

        lazy {
            bindings = <
&none        &super_ad  &main_ad  &not_app   &year     &trans    &trans  &trans        &trans        &vy           &trans        &none
&quotes 0 0  &carets    &parents  &brackets  &curls    &trans    &je     &trans        &trans        &trans        &trans        &none
&trans       &dot_net   &dot_com  &dot_org   &dot_gov  &trans    &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
             &trans     &trans    &none      &trans    &none     &none   &trans        &none         &trans        &trans
            >;
        };

        gaming {
            bindings = <
&to 0   &kp U           &kp Q    &kp W      &kp E      &kp Y           &trans  &trans  &trans  &trans  &trans  &trans
&kp R   &kp LEFT_SHIFT  &kp A    &kp S      &kp D      &kp F           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp M           &kp Z    &kp C      &kp V      &kp B           &trans  &trans  &trans  &trans  &trans  &trans
        &kp Y           &kp TAB  &kp LCTRL  &kp SPACE  &kp LEFT_ALT    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
